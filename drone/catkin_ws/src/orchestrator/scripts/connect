#!/usr/bin/env python3
import socket
import select
import time
import rospy
import numpy as np
from std_msgs.msg import Float32
#from orchestrator.msg import float32array

speed = None   # global component to transmit the parameter

class Connect:
    
    def __init__(self):

        # initialize node
        rospy.init_node('tcptalker',anonymous=0)

        # initialize publisher
        self.pub_pose = rospy.Publisher('tcptopic',Float32,queue_size=10)
        self.rate = rospy.Rate(20)

    

        # initialize subscriber
        self.speed_sub = rospy.Subscriber('speed_info',Float32, self.callback)

        # initialize TCP/IP connect
        time.sleep(5)
        self.sock_recv = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.sock_recv.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.sock_send = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

        # connect
        self.sock_recv.bind(('localhost', 9996))
        self.sock_recv.listen(5)
        self.sock_send.connect(('localhost', 9997))

        # wait for connect 
        self.sock_recv, self.client_address = self.sock_recv.accept()


    def start(self):
        self.sock_send.sendall("autoSimulation OFF;".encode())
        while not rospy.is_shutdown():
            self.empty_socket(self.sock_recv)

            for i in range(300):

                if speed is not None :
                    self.data = speed
                    self.sock_send.sendall("step {} {} {} {};".format(self.data.data, self.data.data, self.data.data, self.data.data).encode())

                # publish the current position of drone
                self.state_msg = self.sock_recv.recv(1024).decode('utf-8')
                self.state_arr = self.state_msg.split(';')[-2].split(' ')
                self.publi =  float(self.state_arr[1])
                self.pub_pose_info = Float32(self.publi)
                self.pub_pose.publish(self.pub_pose_info.data)
                
                #self.pubz = float(state_arr[1])
                #self.pub_posez.publish(self.pubz.data)
                #rospy.loginfo(publi)
                #pub.publish(publi)

                time.sleep(0.05)

                if float(self.state_arr[1]) < 0 or float(self.state_arr[1]) > 20:
                    break
                if float(self.state_arr[0]) > 3:
                    break

            # reset the position of drone
            self.sock_send.sendall("reset 0.0 0.0;".encode())

    def callback(self,data):
        # transmit the data to global
        global speed
        speed = data

    def empty_socket(self, sock):
        """remove the data present on the socket"""
        input = [sock]
        while 1:
            inputready, o, e = select.select(input,[],[], 0.0)
            if len(inputready) == 0: break
            for s in inputready: s.recv(1024)


if __name__ == '__main__':
    try:
        connect = Connect()
        connect.start()
    except rospy.ROSInterruptException:
        pass

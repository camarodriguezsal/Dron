#!/usr/bin/env python3
import rospy
import time
from threading import Lock
#from orchestrator.msg import float32array
from std_msgs.msg import Float32
from ddpg.tasks.takeoff import MyTask
from ddpg.agents.ddpg import DDPG

class HandleNode:
    def __init__(self):
        # ros initialize
        rospy.init_node('controller', anonymous = 0)
        self.pub_speed_info = rospy.Publisher('speed_info', Float32, queue_size = 10)
        rospy.Subscriber('tcptopic',Float32, self.callback)

        self.state = 'INIT'              # one of ['INIT', 'RESET', 'EPISODE']; to keep track of current state
        self.timer = rospy.Time()    # timer instance
        self.num_episodes = 1000        # max no. of episodes
        self.update_rate = 20            # update rate
        self.transient_period = 0.05      # period to wait for episode reset requests to settle
        self.callback_lock = Lock()  # mutex/lock for subscriber callback
        
        # initialize task
        task_name = "Takeoff"
        rospy.loginfo("RL Drone[{}]: task= {}".format(self.state, task_name))
        self.task = MyTask()

        # initialize agent
        agent_name = "DDPG"
        rospy.loginfo("RL Drone[{}]: agent= {}".format(self.state, agent_name))
        self.agent = DDPG(self.task)
        self.task.set_agent(self.agent)

        self.episode = 0

    def start(self):
        # reset to begin first episode
        self.reset()
        # loop start
        self.loop()

    def loop(self):
        # run till shutdown
        rate = rospy.Rate(self.update_rate)
        while not rospy.is_shutdown():

            # update task, get control action and whether this episode is done
            if self.timestamp and self.drone_pose:
                rospy.logdebug("RL Drone[{}]: timestamp = ".format(self.state, self.timestamp))
                speed, done = self.task.update(self.timestamp, self.drone_pose)
                if done:
                    self.reset()
                elif speed is not None:
                    self.pub_speed_info.publish(speed)
            rate.sleep()

    def reset(self):
        self.state = 'RESET'
        speed = 0.0
        self.pub_speed_info.publish(speed)
        time.sleep(self.transient_period)
        
        # new episode
        self.start_time = None
        self.timestamp = None
        self.drone_pose = None
        self.episode += 1

        # whether the current episode number more than the maximal number of episode
        if self.episode > self.num_episodes:
            shutdown_reason = "RL Drone[{}]: Finished {} episodes".format(self.state, self.episode - 1)
            rospy.loginfo(shutdown_reason)
            rospy.signal_shutdown("shutdown_reason")
            return
        rospy.loginfo("RL Drone[{}]: Episode {}".format(self.state, self.episode))

        self.state = 'EPISODE'


    def callback(self, msg):
        # Use a mutex/lock so that only one message is processed at a time (drop others)
        if self.callback_lock.acquire(blocking=False):
            try:
                if self.state == 'EPISODE':  # do nothing in other states
                    # Initialize start time, once per episode
                    if self.start_time is None:
                        self.start_time = self.timer.now()

                    # Extract relevant components from message
                    self.timestamp = (self.timer.now() - self.start_time).to_sec()  # in secs, relative to start time
                    if msg is not None:
                        self.drone_pose = msg.data
                    else:
                        rospy.logwarn("RLControllerNode[{}]: Unknown message type: '{}'".format(self.state, msg._type))
            finally:
                self.callback_lock.release()

if __name__ == '__main__':
    try:
        handle_node = HandleNode()
        handle_node.start()
    except rospy.ROSInterruptException:
        pass


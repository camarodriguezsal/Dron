# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from modrob_simulation/RobotConfigCommanded.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import modrob_simulation.msg

class RobotConfigCommanded(genpy.Message):
  _md5sum = "317b6847d28ab67b3eb3e1fdec1c5d27"
  _type = "modrob_simulation/RobotConfigCommanded"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# This message describes a robot arm movement
# Array indices from 0 to max match joints from base joint to last joint
JointConfigCommanded[] joint_config_commanded
bool tool_activation

================================================================================
MSG: modrob_simulation/JointConfigCommanded
# This message describes a joint movement
float64 joint_angle
float64 joint_velocity
float64 joint_acceleration
float64 joint_torque"""
  __slots__ = ['joint_config_commanded','tool_activation']
  _slot_types = ['modrob_simulation/JointConfigCommanded[]','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       joint_config_commanded,tool_activation

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotConfigCommanded, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.joint_config_commanded is None:
        self.joint_config_commanded = []
      if self.tool_activation is None:
        self.tool_activation = False
    else:
      self.joint_config_commanded = []
      self.tool_activation = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.joint_config_commanded)
      buff.write(_struct_I.pack(length))
      for val1 in self.joint_config_commanded:
        _x = val1
        buff.write(_get_struct_4d().pack(_x.joint_angle, _x.joint_velocity, _x.joint_acceleration, _x.joint_torque))
      _x = self.tool_activation
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.joint_config_commanded is None:
        self.joint_config_commanded = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.joint_config_commanded = []
      for i in range(0, length):
        val1 = modrob_simulation.msg.JointConfigCommanded()
        _x = val1
        start = end
        end += 32
        (_x.joint_angle, _x.joint_velocity, _x.joint_acceleration, _x.joint_torque,) = _get_struct_4d().unpack(str[start:end])
        self.joint_config_commanded.append(val1)
      start = end
      end += 1
      (self.tool_activation,) = _get_struct_B().unpack(str[start:end])
      self.tool_activation = bool(self.tool_activation)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.joint_config_commanded)
      buff.write(_struct_I.pack(length))
      for val1 in self.joint_config_commanded:
        _x = val1
        buff.write(_get_struct_4d().pack(_x.joint_angle, _x.joint_velocity, _x.joint_acceleration, _x.joint_torque))
      _x = self.tool_activation
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.joint_config_commanded is None:
        self.joint_config_commanded = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.joint_config_commanded = []
      for i in range(0, length):
        val1 = modrob_simulation.msg.JointConfigCommanded()
        _x = val1
        start = end
        end += 32
        (_x.joint_angle, _x.joint_velocity, _x.joint_acceleration, _x.joint_torque,) = _get_struct_4d().unpack(str[start:end])
        self.joint_config_commanded.append(val1)
      start = end
      end += 1
      (self.tool_activation,) = _get_struct_B().unpack(str[start:end])
      self.tool_activation = bool(self.tool_activation)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B

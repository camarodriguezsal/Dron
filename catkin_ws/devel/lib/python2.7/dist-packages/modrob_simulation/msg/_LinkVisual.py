# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from modrob_simulation/LinkVisual.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class LinkVisual(genpy.Message):
  _md5sum = "74676e346ad25138f4a19f88be4b498d"
  _type = "modrob_simulation/LinkVisual"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#Documentation, see: http://wiki.ros.org/urdf/XML/link

string name

#origin
float64 origin_x
float64 origin_y
float64 origin_z

float64 origin_r
float64 origin_p
float64 origin_yy

#geometry
string type     #box, cylinder, sphere
float64 arg1    # depending on the chosen type either x or radius
float64 arg2    # depending on the chosen type either y or length
float64 arg3    # for boxes: z

#material
string color_name
float64 color_r #red
float64 color_g #green
float64 color_b #blue
float64 color_a #transparancy

#gazebo material
string gazebo_material

string texture"""
  __slots__ = ['name','origin_x','origin_y','origin_z','origin_r','origin_p','origin_yy','type','arg1','arg2','arg3','color_name','color_r','color_g','color_b','color_a','gazebo_material','texture']
  _slot_types = ['string','float64','float64','float64','float64','float64','float64','string','float64','float64','float64','string','float64','float64','float64','float64','string','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       name,origin_x,origin_y,origin_z,origin_r,origin_p,origin_yy,type,arg1,arg2,arg3,color_name,color_r,color_g,color_b,color_a,gazebo_material,texture

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LinkVisual, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.name is None:
        self.name = ''
      if self.origin_x is None:
        self.origin_x = 0.
      if self.origin_y is None:
        self.origin_y = 0.
      if self.origin_z is None:
        self.origin_z = 0.
      if self.origin_r is None:
        self.origin_r = 0.
      if self.origin_p is None:
        self.origin_p = 0.
      if self.origin_yy is None:
        self.origin_yy = 0.
      if self.type is None:
        self.type = ''
      if self.arg1 is None:
        self.arg1 = 0.
      if self.arg2 is None:
        self.arg2 = 0.
      if self.arg3 is None:
        self.arg3 = 0.
      if self.color_name is None:
        self.color_name = ''
      if self.color_r is None:
        self.color_r = 0.
      if self.color_g is None:
        self.color_g = 0.
      if self.color_b is None:
        self.color_b = 0.
      if self.color_a is None:
        self.color_a = 0.
      if self.gazebo_material is None:
        self.gazebo_material = ''
      if self.texture is None:
        self.texture = ''
    else:
      self.name = ''
      self.origin_x = 0.
      self.origin_y = 0.
      self.origin_z = 0.
      self.origin_r = 0.
      self.origin_p = 0.
      self.origin_yy = 0.
      self.type = ''
      self.arg1 = 0.
      self.arg2 = 0.
      self.arg3 = 0.
      self.color_name = ''
      self.color_r = 0.
      self.color_g = 0.
      self.color_b = 0.
      self.color_a = 0.
      self.gazebo_material = ''
      self.texture = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6d().pack(_x.origin_x, _x.origin_y, _x.origin_z, _x.origin_r, _x.origin_p, _x.origin_yy))
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3d().pack(_x.arg1, _x.arg2, _x.arg3))
      _x = self.color_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.color_r, _x.color_g, _x.color_b, _x.color_a))
      _x = self.gazebo_material
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.texture
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.origin_x, _x.origin_y, _x.origin_z, _x.origin_r, _x.origin_p, _x.origin_yy,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.type = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.arg1, _x.arg2, _x.arg3,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.color_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.color_name = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.color_r, _x.color_g, _x.color_b, _x.color_a,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.gazebo_material = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.gazebo_material = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.texture = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.texture = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6d().pack(_x.origin_x, _x.origin_y, _x.origin_z, _x.origin_r, _x.origin_p, _x.origin_yy))
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3d().pack(_x.arg1, _x.arg2, _x.arg3))
      _x = self.color_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.color_r, _x.color_g, _x.color_b, _x.color_a))
      _x = self.gazebo_material
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.texture
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.origin_x, _x.origin_y, _x.origin_z, _x.origin_r, _x.origin_p, _x.origin_yy,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.type = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.arg1, _x.arg2, _x.arg3,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.color_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.color_name = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.color_r, _x.color_g, _x.color_b, _x.color_a,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.gazebo_material = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.gazebo_material = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.texture = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.texture = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d

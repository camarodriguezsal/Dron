# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from modrob_simulation/LinkDescription.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import modrob_simulation.msg

class LinkDescription(genpy.Message):
  _md5sum = "f5271258b3aea909f19f1525f4430406"
  _type = "modrob_simulation/LinkDescription"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#See: http://wiki.ros.org/urdf/XML/link


string name

#inertial
float64 origin_x
float64 origin_y
float64 origin_z

float64 origin_r
float64 origin_p
float64 origin_yy

float64 mass

float64 intertia_ixx
float64 intertia_ixy
float64 intertia_ixz
float64 intertia_iyy
float64 intertia_iyz
float64 intertia_izz

# friction
float64 mu1
float64 mu2
float64 kp
float64 kd

#visual
LinkVisual[] link_visual           #List of visual elements

#collision
LinkCollision[] link_collision     #List of collision elements

================================================================================
MSG: modrob_simulation/LinkVisual
#Documentation, see: http://wiki.ros.org/urdf/XML/link

string name

#origin
float64 origin_x
float64 origin_y
float64 origin_z

float64 origin_r
float64 origin_p
float64 origin_yy

#geometry
string type     #box, cylinder, sphere
float64 arg1    # depending on the chosen type either x or radius
float64 arg2    # depending on the chosen type either y or length
float64 arg3    # for boxes: z

#material
string color_name
float64 color_r #red
float64 color_g #green
float64 color_b #blue
float64 color_a #transparancy

#gazebo material
string gazebo_material

string texture
================================================================================
MSG: modrob_simulation/LinkCollision
#Documentation, see: http://wiki.ros.org/urdf/XML/link

string name

#origin
float64 origin_x
float64 origin_y
float64 origin_z

float64 origin_r
float64 origin_p
float64 origin_yy

#geometry
string type     #box, cylinder, sphere
float64 arg1    # depending on the chosen type either x or radius
float64 arg2    # depending on the chosen type either y or length
float64 arg3    # for boxes: z"""
  __slots__ = ['name','origin_x','origin_y','origin_z','origin_r','origin_p','origin_yy','mass','intertia_ixx','intertia_ixy','intertia_ixz','intertia_iyy','intertia_iyz','intertia_izz','mu1','mu2','kp','kd','link_visual','link_collision']
  _slot_types = ['string','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','modrob_simulation/LinkVisual[]','modrob_simulation/LinkCollision[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       name,origin_x,origin_y,origin_z,origin_r,origin_p,origin_yy,mass,intertia_ixx,intertia_ixy,intertia_ixz,intertia_iyy,intertia_iyz,intertia_izz,mu1,mu2,kp,kd,link_visual,link_collision

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LinkDescription, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.name is None:
        self.name = ''
      if self.origin_x is None:
        self.origin_x = 0.
      if self.origin_y is None:
        self.origin_y = 0.
      if self.origin_z is None:
        self.origin_z = 0.
      if self.origin_r is None:
        self.origin_r = 0.
      if self.origin_p is None:
        self.origin_p = 0.
      if self.origin_yy is None:
        self.origin_yy = 0.
      if self.mass is None:
        self.mass = 0.
      if self.intertia_ixx is None:
        self.intertia_ixx = 0.
      if self.intertia_ixy is None:
        self.intertia_ixy = 0.
      if self.intertia_ixz is None:
        self.intertia_ixz = 0.
      if self.intertia_iyy is None:
        self.intertia_iyy = 0.
      if self.intertia_iyz is None:
        self.intertia_iyz = 0.
      if self.intertia_izz is None:
        self.intertia_izz = 0.
      if self.mu1 is None:
        self.mu1 = 0.
      if self.mu2 is None:
        self.mu2 = 0.
      if self.kp is None:
        self.kp = 0.
      if self.kd is None:
        self.kd = 0.
      if self.link_visual is None:
        self.link_visual = []
      if self.link_collision is None:
        self.link_collision = []
    else:
      self.name = ''
      self.origin_x = 0.
      self.origin_y = 0.
      self.origin_z = 0.
      self.origin_r = 0.
      self.origin_p = 0.
      self.origin_yy = 0.
      self.mass = 0.
      self.intertia_ixx = 0.
      self.intertia_ixy = 0.
      self.intertia_ixz = 0.
      self.intertia_iyy = 0.
      self.intertia_iyz = 0.
      self.intertia_izz = 0.
      self.mu1 = 0.
      self.mu2 = 0.
      self.kp = 0.
      self.kd = 0.
      self.link_visual = []
      self.link_collision = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_17d().pack(_x.origin_x, _x.origin_y, _x.origin_z, _x.origin_r, _x.origin_p, _x.origin_yy, _x.mass, _x.intertia_ixx, _x.intertia_ixy, _x.intertia_ixz, _x.intertia_iyy, _x.intertia_iyz, _x.intertia_izz, _x.mu1, _x.mu2, _x.kp, _x.kd))
      length = len(self.link_visual)
      buff.write(_struct_I.pack(length))
      for val1 in self.link_visual:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_6d().pack(_x.origin_x, _x.origin_y, _x.origin_z, _x.origin_r, _x.origin_p, _x.origin_yy))
        _x = val1.type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_3d().pack(_x.arg1, _x.arg2, _x.arg3))
        _x = val1.color_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_4d().pack(_x.color_r, _x.color_g, _x.color_b, _x.color_a))
        _x = val1.gazebo_material
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.texture
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.link_collision)
      buff.write(_struct_I.pack(length))
      for val1 in self.link_collision:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_6d().pack(_x.origin_x, _x.origin_y, _x.origin_z, _x.origin_r, _x.origin_p, _x.origin_yy))
        _x = val1.type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_3d().pack(_x.arg1, _x.arg2, _x.arg3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.link_visual is None:
        self.link_visual = None
      if self.link_collision is None:
        self.link_collision = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 136
      (_x.origin_x, _x.origin_y, _x.origin_z, _x.origin_r, _x.origin_p, _x.origin_yy, _x.mass, _x.intertia_ixx, _x.intertia_ixy, _x.intertia_ixz, _x.intertia_iyy, _x.intertia_iyz, _x.intertia_izz, _x.mu1, _x.mu2, _x.kp, _x.kd,) = _get_struct_17d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.link_visual = []
      for i in range(0, length):
        val1 = modrob_simulation.msg.LinkVisual()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 48
        (_x.origin_x, _x.origin_y, _x.origin_z, _x.origin_r, _x.origin_p, _x.origin_yy,) = _get_struct_6d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.type = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.type = str[start:end]
        _x = val1
        start = end
        end += 24
        (_x.arg1, _x.arg2, _x.arg3,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.color_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.color_name = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.color_r, _x.color_g, _x.color_b, _x.color_a,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.gazebo_material = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.gazebo_material = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.texture = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.texture = str[start:end]
        self.link_visual.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.link_collision = []
      for i in range(0, length):
        val1 = modrob_simulation.msg.LinkCollision()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 48
        (_x.origin_x, _x.origin_y, _x.origin_z, _x.origin_r, _x.origin_p, _x.origin_yy,) = _get_struct_6d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.type = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.type = str[start:end]
        _x = val1
        start = end
        end += 24
        (_x.arg1, _x.arg2, _x.arg3,) = _get_struct_3d().unpack(str[start:end])
        self.link_collision.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_17d().pack(_x.origin_x, _x.origin_y, _x.origin_z, _x.origin_r, _x.origin_p, _x.origin_yy, _x.mass, _x.intertia_ixx, _x.intertia_ixy, _x.intertia_ixz, _x.intertia_iyy, _x.intertia_iyz, _x.intertia_izz, _x.mu1, _x.mu2, _x.kp, _x.kd))
      length = len(self.link_visual)
      buff.write(_struct_I.pack(length))
      for val1 in self.link_visual:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_6d().pack(_x.origin_x, _x.origin_y, _x.origin_z, _x.origin_r, _x.origin_p, _x.origin_yy))
        _x = val1.type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_3d().pack(_x.arg1, _x.arg2, _x.arg3))
        _x = val1.color_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_4d().pack(_x.color_r, _x.color_g, _x.color_b, _x.color_a))
        _x = val1.gazebo_material
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.texture
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.link_collision)
      buff.write(_struct_I.pack(length))
      for val1 in self.link_collision:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_6d().pack(_x.origin_x, _x.origin_y, _x.origin_z, _x.origin_r, _x.origin_p, _x.origin_yy))
        _x = val1.type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_3d().pack(_x.arg1, _x.arg2, _x.arg3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.link_visual is None:
        self.link_visual = None
      if self.link_collision is None:
        self.link_collision = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 136
      (_x.origin_x, _x.origin_y, _x.origin_z, _x.origin_r, _x.origin_p, _x.origin_yy, _x.mass, _x.intertia_ixx, _x.intertia_ixy, _x.intertia_ixz, _x.intertia_iyy, _x.intertia_iyz, _x.intertia_izz, _x.mu1, _x.mu2, _x.kp, _x.kd,) = _get_struct_17d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.link_visual = []
      for i in range(0, length):
        val1 = modrob_simulation.msg.LinkVisual()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 48
        (_x.origin_x, _x.origin_y, _x.origin_z, _x.origin_r, _x.origin_p, _x.origin_yy,) = _get_struct_6d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.type = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.type = str[start:end]
        _x = val1
        start = end
        end += 24
        (_x.arg1, _x.arg2, _x.arg3,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.color_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.color_name = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.color_r, _x.color_g, _x.color_b, _x.color_a,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.gazebo_material = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.gazebo_material = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.texture = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.texture = str[start:end]
        self.link_visual.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.link_collision = []
      for i in range(0, length):
        val1 = modrob_simulation.msg.LinkCollision()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 48
        (_x.origin_x, _x.origin_y, _x.origin_z, _x.origin_r, _x.origin_p, _x.origin_yy,) = _get_struct_6d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.type = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.type = str[start:end]
        _x = val1
        start = end
        end += 24
        (_x.arg1, _x.arg2, _x.arg3,) = _get_struct_3d().unpack(str[start:end])
        self.link_collision.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_17d = None
def _get_struct_17d():
    global _struct_17d
    if _struct_17d is None:
        _struct_17d = struct.Struct("<17d")
    return _struct_17d
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d

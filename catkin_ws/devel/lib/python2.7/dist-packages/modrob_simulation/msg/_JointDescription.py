# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from modrob_simulation/JointDescription.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class JointDescription(genpy.Message):
  _md5sum = "540b4bd087e3ef071377bab7fe16e997"
  _type = "modrob_simulation/JointDescription"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#Documentation on each attribute, see: http://wiki.ros.org/urdf/XML/joint

string name
string type

#origin
float64 origin_x
float64 origin_y
float64 origin_z

float64 origin_r
float64 origin_p
float64 origin_yy

#parent/child links
string parent_link
string child_link

#axis
float64 axis_x
float64 axis_y
float64 axis_z

#calibration, not needed

#dynamics
float64 damping
float64 friction

#limit
float64 lower
float64 upper
float64 effort
float64 velocity

#motor
float64 gear_ratio

#mimic, not needed

#safety_controller
float64 soft_lower_limit
float64 soft_upper_limit
float64 k_position
float64 k_velocity

"""
  __slots__ = ['name','type','origin_x','origin_y','origin_z','origin_r','origin_p','origin_yy','parent_link','child_link','axis_x','axis_y','axis_z','damping','friction','lower','upper','effort','velocity','gear_ratio','soft_lower_limit','soft_upper_limit','k_position','k_velocity']
  _slot_types = ['string','string','float64','float64','float64','float64','float64','float64','string','string','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       name,type,origin_x,origin_y,origin_z,origin_r,origin_p,origin_yy,parent_link,child_link,axis_x,axis_y,axis_z,damping,friction,lower,upper,effort,velocity,gear_ratio,soft_lower_limit,soft_upper_limit,k_position,k_velocity

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(JointDescription, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.name is None:
        self.name = ''
      if self.type is None:
        self.type = ''
      if self.origin_x is None:
        self.origin_x = 0.
      if self.origin_y is None:
        self.origin_y = 0.
      if self.origin_z is None:
        self.origin_z = 0.
      if self.origin_r is None:
        self.origin_r = 0.
      if self.origin_p is None:
        self.origin_p = 0.
      if self.origin_yy is None:
        self.origin_yy = 0.
      if self.parent_link is None:
        self.parent_link = ''
      if self.child_link is None:
        self.child_link = ''
      if self.axis_x is None:
        self.axis_x = 0.
      if self.axis_y is None:
        self.axis_y = 0.
      if self.axis_z is None:
        self.axis_z = 0.
      if self.damping is None:
        self.damping = 0.
      if self.friction is None:
        self.friction = 0.
      if self.lower is None:
        self.lower = 0.
      if self.upper is None:
        self.upper = 0.
      if self.effort is None:
        self.effort = 0.
      if self.velocity is None:
        self.velocity = 0.
      if self.gear_ratio is None:
        self.gear_ratio = 0.
      if self.soft_lower_limit is None:
        self.soft_lower_limit = 0.
      if self.soft_upper_limit is None:
        self.soft_upper_limit = 0.
      if self.k_position is None:
        self.k_position = 0.
      if self.k_velocity is None:
        self.k_velocity = 0.
    else:
      self.name = ''
      self.type = ''
      self.origin_x = 0.
      self.origin_y = 0.
      self.origin_z = 0.
      self.origin_r = 0.
      self.origin_p = 0.
      self.origin_yy = 0.
      self.parent_link = ''
      self.child_link = ''
      self.axis_x = 0.
      self.axis_y = 0.
      self.axis_z = 0.
      self.damping = 0.
      self.friction = 0.
      self.lower = 0.
      self.upper = 0.
      self.effort = 0.
      self.velocity = 0.
      self.gear_ratio = 0.
      self.soft_lower_limit = 0.
      self.soft_upper_limit = 0.
      self.k_position = 0.
      self.k_velocity = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6d().pack(_x.origin_x, _x.origin_y, _x.origin_z, _x.origin_r, _x.origin_p, _x.origin_yy))
      _x = self.parent_link
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.child_link
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_14d().pack(_x.axis_x, _x.axis_y, _x.axis_z, _x.damping, _x.friction, _x.lower, _x.upper, _x.effort, _x.velocity, _x.gear_ratio, _x.soft_lower_limit, _x.soft_upper_limit, _x.k_position, _x.k_velocity))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.type = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.origin_x, _x.origin_y, _x.origin_z, _x.origin_r, _x.origin_p, _x.origin_yy,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.parent_link = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.parent_link = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.child_link = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.child_link = str[start:end]
      _x = self
      start = end
      end += 112
      (_x.axis_x, _x.axis_y, _x.axis_z, _x.damping, _x.friction, _x.lower, _x.upper, _x.effort, _x.velocity, _x.gear_ratio, _x.soft_lower_limit, _x.soft_upper_limit, _x.k_position, _x.k_velocity,) = _get_struct_14d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6d().pack(_x.origin_x, _x.origin_y, _x.origin_z, _x.origin_r, _x.origin_p, _x.origin_yy))
      _x = self.parent_link
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.child_link
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_14d().pack(_x.axis_x, _x.axis_y, _x.axis_z, _x.damping, _x.friction, _x.lower, _x.upper, _x.effort, _x.velocity, _x.gear_ratio, _x.soft_lower_limit, _x.soft_upper_limit, _x.k_position, _x.k_velocity))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.type = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.origin_x, _x.origin_y, _x.origin_z, _x.origin_r, _x.origin_p, _x.origin_yy,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.parent_link = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.parent_link = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.child_link = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.child_link = str[start:end]
      _x = self
      start = end
      end += 112
      (_x.axis_x, _x.axis_y, _x.axis_z, _x.damping, _x.friction, _x.lower, _x.upper, _x.effort, _x.velocity, _x.gear_ratio, _x.soft_lower_limit, _x.soft_upper_limit, _x.k_position, _x.k_velocity,) = _get_struct_14d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_14d = None
def _get_struct_14d():
    global _struct_14d
    if _struct_14d is None:
        _struct_14d = struct.Struct("<14d")
    return _struct_14d
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from modrob_control_kinematics/ControlVelocityDesired.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class ControlVelocityDesired(genpy.Message):
  _md5sum = "9f1126242bb2728989806e997a6c03bf"
  _type = "modrob_control_kinematics/ControlVelocityDesired"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Message containing all posible velocities for Jointspace control and Workspace control and a bool for activating the tool
# This message should be used to tell the kinematics node the desired velocities coming from a control device

# Joint velocities for joint control
# Array indices from 0 to max joints starting at the base joint
float64[] joint_velocities

# Cartesian velocities for workspace control
geometry_msgs/Twist workspace_velocities

# Boolean to indicate if joint space or workspace data is valid
bool isJointspace

# Boolean for toolactivation
bool tool_activation

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['joint_velocities','workspace_velocities','isJointspace','tool_activation']
  _slot_types = ['float64[]','geometry_msgs/Twist','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       joint_velocities,workspace_velocities,isJointspace,tool_activation

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ControlVelocityDesired, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.joint_velocities is None:
        self.joint_velocities = []
      if self.workspace_velocities is None:
        self.workspace_velocities = geometry_msgs.msg.Twist()
      if self.isJointspace is None:
        self.isJointspace = False
      if self.tool_activation is None:
        self.tool_activation = False
    else:
      self.joint_velocities = []
      self.workspace_velocities = geometry_msgs.msg.Twist()
      self.isJointspace = False
      self.tool_activation = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.joint_velocities)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.joint_velocities))
      _x = self
      buff.write(_get_struct_6d2B().pack(_x.workspace_velocities.linear.x, _x.workspace_velocities.linear.y, _x.workspace_velocities.linear.z, _x.workspace_velocities.angular.x, _x.workspace_velocities.angular.y, _x.workspace_velocities.angular.z, _x.isJointspace, _x.tool_activation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.workspace_velocities is None:
        self.workspace_velocities = geometry_msgs.msg.Twist()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.joint_velocities = s.unpack(str[start:end])
      _x = self
      start = end
      end += 50
      (_x.workspace_velocities.linear.x, _x.workspace_velocities.linear.y, _x.workspace_velocities.linear.z, _x.workspace_velocities.angular.x, _x.workspace_velocities.angular.y, _x.workspace_velocities.angular.z, _x.isJointspace, _x.tool_activation,) = _get_struct_6d2B().unpack(str[start:end])
      self.isJointspace = bool(self.isJointspace)
      self.tool_activation = bool(self.tool_activation)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.joint_velocities)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.joint_velocities.tostring())
      _x = self
      buff.write(_get_struct_6d2B().pack(_x.workspace_velocities.linear.x, _x.workspace_velocities.linear.y, _x.workspace_velocities.linear.z, _x.workspace_velocities.angular.x, _x.workspace_velocities.angular.y, _x.workspace_velocities.angular.z, _x.isJointspace, _x.tool_activation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.workspace_velocities is None:
        self.workspace_velocities = geometry_msgs.msg.Twist()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.joint_velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 50
      (_x.workspace_velocities.linear.x, _x.workspace_velocities.linear.y, _x.workspace_velocities.linear.z, _x.workspace_velocities.angular.x, _x.workspace_velocities.angular.y, _x.workspace_velocities.angular.z, _x.isJointspace, _x.tool_activation,) = _get_struct_6d2B().unpack(str[start:end])
      self.isJointspace = bool(self.isJointspace)
      self.tool_activation = bool(self.tool_activation)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6d2B = None
def _get_struct_6d2B():
    global _struct_6d2B
    if _struct_6d2B is None:
        _struct_6d2B = struct.Struct("<6d2B")
    return _struct_6d2B

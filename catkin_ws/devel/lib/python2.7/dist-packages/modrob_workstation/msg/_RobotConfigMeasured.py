# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from modrob_workstation/RobotConfigMeasured.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import modrob_workstation.msg

class RobotConfigMeasured(genpy.Message):
  _md5sum = "63d934dedb04d4a03a4dbce708629c90"
  _type = "modrob_workstation/RobotConfigMeasured"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# List of joint configurations
# Array indices from 0 to max match joints from base joint to last joint
JointConfigMeasured[] joint_config_measured
uint8 measured_robot_state
bool tool_activation

================================================================================
MSG: modrob_workstation/JointConfigMeasured
# This message describes a joint movement
float64 joint_angle
float64 joint_velocity
float64 joint_acceleration
float64 joint_torque
float64 joint_temperature"""
  __slots__ = ['joint_config_measured','measured_robot_state','tool_activation']
  _slot_types = ['modrob_workstation/JointConfigMeasured[]','uint8','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       joint_config_measured,measured_robot_state,tool_activation

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotConfigMeasured, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.joint_config_measured is None:
        self.joint_config_measured = []
      if self.measured_robot_state is None:
        self.measured_robot_state = 0
      if self.tool_activation is None:
        self.tool_activation = False
    else:
      self.joint_config_measured = []
      self.measured_robot_state = 0
      self.tool_activation = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.joint_config_measured)
      buff.write(_struct_I.pack(length))
      for val1 in self.joint_config_measured:
        _x = val1
        buff.write(_get_struct_5d().pack(_x.joint_angle, _x.joint_velocity, _x.joint_acceleration, _x.joint_torque, _x.joint_temperature))
      _x = self
      buff.write(_get_struct_2B().pack(_x.measured_robot_state, _x.tool_activation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.joint_config_measured is None:
        self.joint_config_measured = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.joint_config_measured = []
      for i in range(0, length):
        val1 = modrob_workstation.msg.JointConfigMeasured()
        _x = val1
        start = end
        end += 40
        (_x.joint_angle, _x.joint_velocity, _x.joint_acceleration, _x.joint_torque, _x.joint_temperature,) = _get_struct_5d().unpack(str[start:end])
        self.joint_config_measured.append(val1)
      _x = self
      start = end
      end += 2
      (_x.measured_robot_state, _x.tool_activation,) = _get_struct_2B().unpack(str[start:end])
      self.tool_activation = bool(self.tool_activation)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.joint_config_measured)
      buff.write(_struct_I.pack(length))
      for val1 in self.joint_config_measured:
        _x = val1
        buff.write(_get_struct_5d().pack(_x.joint_angle, _x.joint_velocity, _x.joint_acceleration, _x.joint_torque, _x.joint_temperature))
      _x = self
      buff.write(_get_struct_2B().pack(_x.measured_robot_state, _x.tool_activation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.joint_config_measured is None:
        self.joint_config_measured = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.joint_config_measured = []
      for i in range(0, length):
        val1 = modrob_workstation.msg.JointConfigMeasured()
        _x = val1
        start = end
        end += 40
        (_x.joint_angle, _x.joint_velocity, _x.joint_acceleration, _x.joint_torque, _x.joint_temperature,) = _get_struct_5d().unpack(str[start:end])
        self.joint_config_measured.append(val1)
      _x = self
      start = end
      end += 2
      (_x.measured_robot_state, _x.tool_activation,) = _get_struct_2B().unpack(str[start:end])
      self.tool_activation = bool(self.tool_activation)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_5d = None
def _get_struct_5d():
    global _struct_5d
    if _struct_5d is None:
        _struct_5d = struct.Struct("<5d")
    return _struct_5d

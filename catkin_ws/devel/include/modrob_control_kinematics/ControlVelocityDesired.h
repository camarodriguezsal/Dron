// Generated by gencpp from file modrob_control_kinematics/ControlVelocityDesired.msg
// DO NOT EDIT!


#ifndef MODROB_CONTROL_KINEMATICS_MESSAGE_CONTROLVELOCITYDESIRED_H
#define MODROB_CONTROL_KINEMATICS_MESSAGE_CONTROLVELOCITYDESIRED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Twist.h>

namespace modrob_control_kinematics
{
template <class ContainerAllocator>
struct ControlVelocityDesired_
{
  typedef ControlVelocityDesired_<ContainerAllocator> Type;

  ControlVelocityDesired_()
    : joint_velocities()
    , workspace_velocities()
    , isJointspace(false)
    , tool_activation(false)  {
    }
  ControlVelocityDesired_(const ContainerAllocator& _alloc)
    : joint_velocities(_alloc)
    , workspace_velocities(_alloc)
    , isJointspace(false)
    , tool_activation(false)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _joint_velocities_type;
  _joint_velocities_type joint_velocities;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _workspace_velocities_type;
  _workspace_velocities_type workspace_velocities;

   typedef uint8_t _isJointspace_type;
  _isJointspace_type isJointspace;

   typedef uint8_t _tool_activation_type;
  _tool_activation_type tool_activation;





  typedef boost::shared_ptr< ::modrob_control_kinematics::ControlVelocityDesired_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::modrob_control_kinematics::ControlVelocityDesired_<ContainerAllocator> const> ConstPtr;

}; // struct ControlVelocityDesired_

typedef ::modrob_control_kinematics::ControlVelocityDesired_<std::allocator<void> > ControlVelocityDesired;

typedef boost::shared_ptr< ::modrob_control_kinematics::ControlVelocityDesired > ControlVelocityDesiredPtr;
typedef boost::shared_ptr< ::modrob_control_kinematics::ControlVelocityDesired const> ControlVelocityDesiredConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::modrob_control_kinematics::ControlVelocityDesired_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::modrob_control_kinematics::ControlVelocityDesired_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::modrob_control_kinematics::ControlVelocityDesired_<ContainerAllocator1> & lhs, const ::modrob_control_kinematics::ControlVelocityDesired_<ContainerAllocator2> & rhs)
{
  return lhs.joint_velocities == rhs.joint_velocities &&
    lhs.workspace_velocities == rhs.workspace_velocities &&
    lhs.isJointspace == rhs.isJointspace &&
    lhs.tool_activation == rhs.tool_activation;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::modrob_control_kinematics::ControlVelocityDesired_<ContainerAllocator1> & lhs, const ::modrob_control_kinematics::ControlVelocityDesired_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace modrob_control_kinematics

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::modrob_control_kinematics::ControlVelocityDesired_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::modrob_control_kinematics::ControlVelocityDesired_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::modrob_control_kinematics::ControlVelocityDesired_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::modrob_control_kinematics::ControlVelocityDesired_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::modrob_control_kinematics::ControlVelocityDesired_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::modrob_control_kinematics::ControlVelocityDesired_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::modrob_control_kinematics::ControlVelocityDesired_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9f1126242bb2728989806e997a6c03bf";
  }

  static const char* value(const ::modrob_control_kinematics::ControlVelocityDesired_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9f1126242bb27289ULL;
  static const uint64_t static_value2 = 0x89806e997a6c03bfULL;
};

template<class ContainerAllocator>
struct DataType< ::modrob_control_kinematics::ControlVelocityDesired_<ContainerAllocator> >
{
  static const char* value()
  {
    return "modrob_control_kinematics/ControlVelocityDesired";
  }

  static const char* value(const ::modrob_control_kinematics::ControlVelocityDesired_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::modrob_control_kinematics::ControlVelocityDesired_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message containing all posible velocities for Jointspace control and Workspace control and a bool for activating the tool\n"
"# This message should be used to tell the kinematics node the desired velocities coming from a control device\n"
"\n"
"# Joint velocities for joint control\n"
"# Array indices from 0 to max joints starting at the base joint\n"
"float64[] joint_velocities\n"
"\n"
"# Cartesian velocities for workspace control\n"
"geometry_msgs/Twist workspace_velocities\n"
"\n"
"# Boolean to indicate if joint space or workspace data is valid\n"
"bool isJointspace\n"
"\n"
"# Boolean for toolactivation\n"
"bool tool_activation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::modrob_control_kinematics::ControlVelocityDesired_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::modrob_control_kinematics::ControlVelocityDesired_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_velocities);
      stream.next(m.workspace_velocities);
      stream.next(m.isJointspace);
      stream.next(m.tool_activation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControlVelocityDesired_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::modrob_control_kinematics::ControlVelocityDesired_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::modrob_control_kinematics::ControlVelocityDesired_<ContainerAllocator>& v)
  {
    s << indent << "joint_velocities[]" << std::endl;
    for (size_t i = 0; i < v.joint_velocities.size(); ++i)
    {
      s << indent << "  joint_velocities[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_velocities[i]);
    }
    s << indent << "workspace_velocities: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.workspace_velocities);
    s << indent << "isJointspace: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isJointspace);
    s << indent << "tool_activation: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tool_activation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MODROB_CONTROL_KINEMATICS_MESSAGE_CONTROLVELOCITYDESIRED_H

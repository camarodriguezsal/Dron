// Generated by gencpp from file modrob_simulation/JointConfigMeasured.msg
// DO NOT EDIT!


#ifndef MODROB_SIMULATION_MESSAGE_JOINTCONFIGMEASURED_H
#define MODROB_SIMULATION_MESSAGE_JOINTCONFIGMEASURED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace modrob_simulation
{
template <class ContainerAllocator>
struct JointConfigMeasured_
{
  typedef JointConfigMeasured_<ContainerAllocator> Type;

  JointConfigMeasured_()
    : joint_angle(0.0)
    , joint_velocity(0.0)
    , joint_acceleration(0.0)
    , joint_torque(0.0)
    , joint_temperature(0.0)  {
    }
  JointConfigMeasured_(const ContainerAllocator& _alloc)
    : joint_angle(0.0)
    , joint_velocity(0.0)
    , joint_acceleration(0.0)
    , joint_torque(0.0)
    , joint_temperature(0.0)  {
  (void)_alloc;
    }



   typedef double _joint_angle_type;
  _joint_angle_type joint_angle;

   typedef double _joint_velocity_type;
  _joint_velocity_type joint_velocity;

   typedef double _joint_acceleration_type;
  _joint_acceleration_type joint_acceleration;

   typedef double _joint_torque_type;
  _joint_torque_type joint_torque;

   typedef double _joint_temperature_type;
  _joint_temperature_type joint_temperature;





  typedef boost::shared_ptr< ::modrob_simulation::JointConfigMeasured_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::modrob_simulation::JointConfigMeasured_<ContainerAllocator> const> ConstPtr;

}; // struct JointConfigMeasured_

typedef ::modrob_simulation::JointConfigMeasured_<std::allocator<void> > JointConfigMeasured;

typedef boost::shared_ptr< ::modrob_simulation::JointConfigMeasured > JointConfigMeasuredPtr;
typedef boost::shared_ptr< ::modrob_simulation::JointConfigMeasured const> JointConfigMeasuredConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::modrob_simulation::JointConfigMeasured_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::modrob_simulation::JointConfigMeasured_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::modrob_simulation::JointConfigMeasured_<ContainerAllocator1> & lhs, const ::modrob_simulation::JointConfigMeasured_<ContainerAllocator2> & rhs)
{
  return lhs.joint_angle == rhs.joint_angle &&
    lhs.joint_velocity == rhs.joint_velocity &&
    lhs.joint_acceleration == rhs.joint_acceleration &&
    lhs.joint_torque == rhs.joint_torque &&
    lhs.joint_temperature == rhs.joint_temperature;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::modrob_simulation::JointConfigMeasured_<ContainerAllocator1> & lhs, const ::modrob_simulation::JointConfigMeasured_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace modrob_simulation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::modrob_simulation::JointConfigMeasured_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::modrob_simulation::JointConfigMeasured_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::modrob_simulation::JointConfigMeasured_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::modrob_simulation::JointConfigMeasured_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::modrob_simulation::JointConfigMeasured_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::modrob_simulation::JointConfigMeasured_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::modrob_simulation::JointConfigMeasured_<ContainerAllocator> >
{
  static const char* value()
  {
    return "496f803b6910541253167e93f432014e";
  }

  static const char* value(const ::modrob_simulation::JointConfigMeasured_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x496f803b69105412ULL;
  static const uint64_t static_value2 = 0x53167e93f432014eULL;
};

template<class ContainerAllocator>
struct DataType< ::modrob_simulation::JointConfigMeasured_<ContainerAllocator> >
{
  static const char* value()
  {
    return "modrob_simulation/JointConfigMeasured";
  }

  static const char* value(const ::modrob_simulation::JointConfigMeasured_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::modrob_simulation::JointConfigMeasured_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message describes a joint movement\n"
"\n"
"# The angle the joint is currently at\n"
"float64 joint_angle\n"
"\n"
"# The current velocity of the joint\n"
"float64 joint_velocity\n"
"\n"
"# The acceleration the joint currently experiences\n"
"float64 joint_acceleration\n"
"\n"
"# The torque the joint is delivering\n"
"float64 joint_torque\n"
"\n"
"# The current temperature of the joint\n"
"float64 joint_temperature\n"
;
  }

  static const char* value(const ::modrob_simulation::JointConfigMeasured_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::modrob_simulation::JointConfigMeasured_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_angle);
      stream.next(m.joint_velocity);
      stream.next(m.joint_acceleration);
      stream.next(m.joint_torque);
      stream.next(m.joint_temperature);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointConfigMeasured_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::modrob_simulation::JointConfigMeasured_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::modrob_simulation::JointConfigMeasured_<ContainerAllocator>& v)
  {
    s << indent << "joint_angle: ";
    Printer<double>::stream(s, indent + "  ", v.joint_angle);
    s << indent << "joint_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.joint_velocity);
    s << indent << "joint_acceleration: ";
    Printer<double>::stream(s, indent + "  ", v.joint_acceleration);
    s << indent << "joint_torque: ";
    Printer<double>::stream(s, indent + "  ", v.joint_torque);
    s << indent << "joint_temperature: ";
    Printer<double>::stream(s, indent + "  ", v.joint_temperature);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MODROB_SIMULATION_MESSAGE_JOINTCONFIGMEASURED_H

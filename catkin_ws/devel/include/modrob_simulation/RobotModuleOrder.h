// Generated by gencpp from file modrob_simulation/RobotModuleOrder.msg
// DO NOT EDIT!


#ifndef MODROB_SIMULATION_MESSAGE_ROBOTMODULEORDER_H
#define MODROB_SIMULATION_MESSAGE_ROBOTMODULEORDER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>

namespace modrob_simulation
{
template <class ContainerAllocator>
struct RobotModuleOrder_
{
  typedef RobotModuleOrder_<ContainerAllocator> Type;

  RobotModuleOrder_()
    : modules()
    , base_pos()  {
    }
  RobotModuleOrder_(const ContainerAllocator& _alloc)
    : modules(_alloc)
    , base_pos(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _modules_type;
  _modules_type modules;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _base_pos_type;
  _base_pos_type base_pos;





  typedef boost::shared_ptr< ::modrob_simulation::RobotModuleOrder_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::modrob_simulation::RobotModuleOrder_<ContainerAllocator> const> ConstPtr;

}; // struct RobotModuleOrder_

typedef ::modrob_simulation::RobotModuleOrder_<std::allocator<void> > RobotModuleOrder;

typedef boost::shared_ptr< ::modrob_simulation::RobotModuleOrder > RobotModuleOrderPtr;
typedef boost::shared_ptr< ::modrob_simulation::RobotModuleOrder const> RobotModuleOrderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::modrob_simulation::RobotModuleOrder_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::modrob_simulation::RobotModuleOrder_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::modrob_simulation::RobotModuleOrder_<ContainerAllocator1> & lhs, const ::modrob_simulation::RobotModuleOrder_<ContainerAllocator2> & rhs)
{
  return lhs.modules == rhs.modules &&
    lhs.base_pos == rhs.base_pos;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::modrob_simulation::RobotModuleOrder_<ContainerAllocator1> & lhs, const ::modrob_simulation::RobotModuleOrder_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace modrob_simulation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::modrob_simulation::RobotModuleOrder_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::modrob_simulation::RobotModuleOrder_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::modrob_simulation::RobotModuleOrder_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::modrob_simulation::RobotModuleOrder_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::modrob_simulation::RobotModuleOrder_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::modrob_simulation::RobotModuleOrder_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::modrob_simulation::RobotModuleOrder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "de7e174cc2b4fb52efbd6b6aff72a3aa";
  }

  static const char* value(const ::modrob_simulation::RobotModuleOrder_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xde7e174cc2b4fb52ULL;
  static const uint64_t static_value2 = 0xefbd6b6aff72a3aaULL;
};

template<class ContainerAllocator>
struct DataType< ::modrob_simulation::RobotModuleOrder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "modrob_simulation/RobotModuleOrder";
  }

  static const char* value(const ::modrob_simulation::RobotModuleOrder_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::modrob_simulation::RobotModuleOrder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Array indices from 0 to max match joints from base joint to last joint\n"
"int8[] modules\n"
"\n"
"# Base position\n"
"geometry_msgs/Vector3 base_pos\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::modrob_simulation::RobotModuleOrder_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::modrob_simulation::RobotModuleOrder_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.modules);
      stream.next(m.base_pos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotModuleOrder_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::modrob_simulation::RobotModuleOrder_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::modrob_simulation::RobotModuleOrder_<ContainerAllocator>& v)
  {
    s << indent << "modules[]" << std::endl;
    for (size_t i = 0; i < v.modules.size(); ++i)
    {
      s << indent << "  modules[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.modules[i]);
    }
    s << indent << "base_pos: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.base_pos);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MODROB_SIMULATION_MESSAGE_ROBOTMODULEORDER_H

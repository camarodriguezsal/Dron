// Generated by gencpp from file modrob_workstation/ModuleOrder.msg
// DO NOT EDIT!


#ifndef MODROB_WORKSTATION_MESSAGE_MODULEORDER_H
#define MODROB_WORKSTATION_MESSAGE_MODULEORDER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace modrob_workstation
{
template <class ContainerAllocator>
struct ModuleOrder_
{
  typedef ModuleOrder_<ContainerAllocator> Type;

  ModuleOrder_()
    : modules()  {
    }
  ModuleOrder_(const ContainerAllocator& _alloc)
    : modules(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _modules_type;
  _modules_type modules;





  typedef boost::shared_ptr< ::modrob_workstation::ModuleOrder_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::modrob_workstation::ModuleOrder_<ContainerAllocator> const> ConstPtr;

}; // struct ModuleOrder_

typedef ::modrob_workstation::ModuleOrder_<std::allocator<void> > ModuleOrder;

typedef boost::shared_ptr< ::modrob_workstation::ModuleOrder > ModuleOrderPtr;
typedef boost::shared_ptr< ::modrob_workstation::ModuleOrder const> ModuleOrderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::modrob_workstation::ModuleOrder_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::modrob_workstation::ModuleOrder_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::modrob_workstation::ModuleOrder_<ContainerAllocator1> & lhs, const ::modrob_workstation::ModuleOrder_<ContainerAllocator2> & rhs)
{
  return lhs.modules == rhs.modules;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::modrob_workstation::ModuleOrder_<ContainerAllocator1> & lhs, const ::modrob_workstation::ModuleOrder_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace modrob_workstation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::modrob_workstation::ModuleOrder_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::modrob_workstation::ModuleOrder_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::modrob_workstation::ModuleOrder_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::modrob_workstation::ModuleOrder_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::modrob_workstation::ModuleOrder_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::modrob_workstation::ModuleOrder_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::modrob_workstation::ModuleOrder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "62d9f847abb87d21d9ef47db615bf722";
  }

  static const char* value(const ::modrob_workstation::ModuleOrder_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x62d9f847abb87d21ULL;
  static const uint64_t static_value2 = 0xd9ef47db615bf722ULL;
};

template<class ContainerAllocator>
struct DataType< ::modrob_workstation::ModuleOrder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "modrob_workstation/ModuleOrder";
  }

  static const char* value(const ::modrob_workstation::ModuleOrder_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::modrob_workstation::ModuleOrder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Array indices from 0 to max match joints from base joint to last joint\n"
"int8[] modules\n"
;
  }

  static const char* value(const ::modrob_workstation::ModuleOrder_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::modrob_workstation::ModuleOrder_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.modules);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ModuleOrder_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::modrob_workstation::ModuleOrder_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::modrob_workstation::ModuleOrder_<ContainerAllocator>& v)
  {
    s << indent << "modules[]" << std::endl;
    for (size_t i = 0; i < v.modules.size(); ++i)
    {
      s << indent << "  modules[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.modules[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MODROB_WORKSTATION_MESSAGE_MODULEORDER_H

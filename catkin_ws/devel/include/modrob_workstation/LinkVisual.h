// Generated by gencpp from file modrob_workstation/LinkVisual.msg
// DO NOT EDIT!


#ifndef MODROB_WORKSTATION_MESSAGE_LINKVISUAL_H
#define MODROB_WORKSTATION_MESSAGE_LINKVISUAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace modrob_workstation
{
template <class ContainerAllocator>
struct LinkVisual_
{
  typedef LinkVisual_<ContainerAllocator> Type;

  LinkVisual_()
    : name()
    , origin_x(0.0)
    , origin_y(0.0)
    , origin_z(0.0)
    , origin_r(0.0)
    , origin_p(0.0)
    , origin_yy(0.0)
    , type()
    , arg1(0.0)
    , arg2(0.0)
    , arg3(0.0)
    , color_name()
    , color_r(0.0)
    , color_g(0.0)
    , color_b(0.0)
    , color_a(0.0)
    , texture()  {
    }
  LinkVisual_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , origin_x(0.0)
    , origin_y(0.0)
    , origin_z(0.0)
    , origin_r(0.0)
    , origin_p(0.0)
    , origin_yy(0.0)
    , type(_alloc)
    , arg1(0.0)
    , arg2(0.0)
    , arg3(0.0)
    , color_name(_alloc)
    , color_r(0.0)
    , color_g(0.0)
    , color_b(0.0)
    , color_a(0.0)
    , texture(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef double _origin_x_type;
  _origin_x_type origin_x;

   typedef double _origin_y_type;
  _origin_y_type origin_y;

   typedef double _origin_z_type;
  _origin_z_type origin_z;

   typedef double _origin_r_type;
  _origin_r_type origin_r;

   typedef double _origin_p_type;
  _origin_p_type origin_p;

   typedef double _origin_yy_type;
  _origin_yy_type origin_yy;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef double _arg1_type;
  _arg1_type arg1;

   typedef double _arg2_type;
  _arg2_type arg2;

   typedef double _arg3_type;
  _arg3_type arg3;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _color_name_type;
  _color_name_type color_name;

   typedef double _color_r_type;
  _color_r_type color_r;

   typedef double _color_g_type;
  _color_g_type color_g;

   typedef double _color_b_type;
  _color_b_type color_b;

   typedef double _color_a_type;
  _color_a_type color_a;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _texture_type;
  _texture_type texture;





  typedef boost::shared_ptr< ::modrob_workstation::LinkVisual_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::modrob_workstation::LinkVisual_<ContainerAllocator> const> ConstPtr;

}; // struct LinkVisual_

typedef ::modrob_workstation::LinkVisual_<std::allocator<void> > LinkVisual;

typedef boost::shared_ptr< ::modrob_workstation::LinkVisual > LinkVisualPtr;
typedef boost::shared_ptr< ::modrob_workstation::LinkVisual const> LinkVisualConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::modrob_workstation::LinkVisual_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::modrob_workstation::LinkVisual_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::modrob_workstation::LinkVisual_<ContainerAllocator1> & lhs, const ::modrob_workstation::LinkVisual_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.origin_x == rhs.origin_x &&
    lhs.origin_y == rhs.origin_y &&
    lhs.origin_z == rhs.origin_z &&
    lhs.origin_r == rhs.origin_r &&
    lhs.origin_p == rhs.origin_p &&
    lhs.origin_yy == rhs.origin_yy &&
    lhs.type == rhs.type &&
    lhs.arg1 == rhs.arg1 &&
    lhs.arg2 == rhs.arg2 &&
    lhs.arg3 == rhs.arg3 &&
    lhs.color_name == rhs.color_name &&
    lhs.color_r == rhs.color_r &&
    lhs.color_g == rhs.color_g &&
    lhs.color_b == rhs.color_b &&
    lhs.color_a == rhs.color_a &&
    lhs.texture == rhs.texture;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::modrob_workstation::LinkVisual_<ContainerAllocator1> & lhs, const ::modrob_workstation::LinkVisual_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace modrob_workstation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::modrob_workstation::LinkVisual_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::modrob_workstation::LinkVisual_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::modrob_workstation::LinkVisual_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::modrob_workstation::LinkVisual_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::modrob_workstation::LinkVisual_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::modrob_workstation::LinkVisual_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::modrob_workstation::LinkVisual_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0430b8a9f268ec9b2d7e3df97c5473f4";
  }

  static const char* value(const ::modrob_workstation::LinkVisual_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0430b8a9f268ec9bULL;
  static const uint64_t static_value2 = 0x2d7e3df97c5473f4ULL;
};

template<class ContainerAllocator>
struct DataType< ::modrob_workstation::LinkVisual_<ContainerAllocator> >
{
  static const char* value()
  {
    return "modrob_workstation/LinkVisual";
  }

  static const char* value(const ::modrob_workstation::LinkVisual_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::modrob_workstation::LinkVisual_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Documentation, see: http://wiki.ros.org/urdf/XML/link\n"
"\n"
"string name\n"
"\n"
"#origin\n"
"float64 origin_x\n"
"float64 origin_y\n"
"float64 origin_z\n"
"\n"
"float64 origin_r\n"
"float64 origin_p\n"
"float64 origin_yy\n"
"\n"
"#geometry\n"
"string type     #box, cylinder, sphere\n"
"float64 arg1    # depending on the chosen type either x or radius\n"
"float64 arg2    # depending on the chosen type either y or length\n"
"float64 arg3    # for boxes: z\n"
"\n"
"#material\n"
"string color_name\n"
"float64 color_r #red\n"
"float64 color_g #green\n"
"float64 color_b #blue\n"
"float64 color_a #transparancy\n"
"\n"
"string texture\n"
;
  }

  static const char* value(const ::modrob_workstation::LinkVisual_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::modrob_workstation::LinkVisual_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.origin_x);
      stream.next(m.origin_y);
      stream.next(m.origin_z);
      stream.next(m.origin_r);
      stream.next(m.origin_p);
      stream.next(m.origin_yy);
      stream.next(m.type);
      stream.next(m.arg1);
      stream.next(m.arg2);
      stream.next(m.arg3);
      stream.next(m.color_name);
      stream.next(m.color_r);
      stream.next(m.color_g);
      stream.next(m.color_b);
      stream.next(m.color_a);
      stream.next(m.texture);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LinkVisual_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::modrob_workstation::LinkVisual_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::modrob_workstation::LinkVisual_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "origin_x: ";
    Printer<double>::stream(s, indent + "  ", v.origin_x);
    s << indent << "origin_y: ";
    Printer<double>::stream(s, indent + "  ", v.origin_y);
    s << indent << "origin_z: ";
    Printer<double>::stream(s, indent + "  ", v.origin_z);
    s << indent << "origin_r: ";
    Printer<double>::stream(s, indent + "  ", v.origin_r);
    s << indent << "origin_p: ";
    Printer<double>::stream(s, indent + "  ", v.origin_p);
    s << indent << "origin_yy: ";
    Printer<double>::stream(s, indent + "  ", v.origin_yy);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "arg1: ";
    Printer<double>::stream(s, indent + "  ", v.arg1);
    s << indent << "arg2: ";
    Printer<double>::stream(s, indent + "  ", v.arg2);
    s << indent << "arg3: ";
    Printer<double>::stream(s, indent + "  ", v.arg3);
    s << indent << "color_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.color_name);
    s << indent << "color_r: ";
    Printer<double>::stream(s, indent + "  ", v.color_r);
    s << indent << "color_g: ";
    Printer<double>::stream(s, indent + "  ", v.color_g);
    s << indent << "color_b: ";
    Printer<double>::stream(s, indent + "  ", v.color_b);
    s << indent << "color_a: ";
    Printer<double>::stream(s, indent + "  ", v.color_a);
    s << indent << "texture: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.texture);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MODROB_WORKSTATION_MESSAGE_LINKVISUAL_H

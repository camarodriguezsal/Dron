// Generated by gencpp from file modrob_workstation/RobotStateCommanded.msg
// DO NOT EDIT!


#ifndef MODROB_WORKSTATION_MESSAGE_ROBOTSTATECOMMANDED_H
#define MODROB_WORKSTATION_MESSAGE_ROBOTSTATECOMMANDED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace modrob_workstation
{
template <class ContainerAllocator>
struct RobotStateCommanded_
{
  typedef RobotStateCommanded_<ContainerAllocator> Type;

  RobotStateCommanded_()
    : state(0)  {
    }
  RobotStateCommanded_(const ContainerAllocator& _alloc)
    : state(0)  {
  (void)_alloc;
    }



   typedef uint8_t _state_type;
  _state_type state;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(OFF)
  #undef OFF
#endif
#if defined(_WIN32) && defined(CONFIGURABLE)
  #undef CONFIGURABLE
#endif
#if defined(_WIN32) && defined(IDLE)
  #undef IDLE
#endif
#if defined(_WIN32) && defined(ERROR)
  #undef ERROR
#endif
#if defined(_WIN32) && defined(CONNECTING)
  #undef CONNECTING
#endif
#if defined(_WIN32) && defined(OP_ANGLES)
  #undef OP_ANGLES
#endif
#if defined(_WIN32) && defined(OP_TORQUES)
  #undef OP_TORQUES
#endif

  enum {
    OFF = 0u,
    CONFIGURABLE = 1u,
    IDLE = 1u,
    ERROR = 2u,
    CONNECTING = 3u,
    OP_ANGLES = 4u,
    OP_TORQUES = 5u,
  };


  typedef boost::shared_ptr< ::modrob_workstation::RobotStateCommanded_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::modrob_workstation::RobotStateCommanded_<ContainerAllocator> const> ConstPtr;

}; // struct RobotStateCommanded_

typedef ::modrob_workstation::RobotStateCommanded_<std::allocator<void> > RobotStateCommanded;

typedef boost::shared_ptr< ::modrob_workstation::RobotStateCommanded > RobotStateCommandedPtr;
typedef boost::shared_ptr< ::modrob_workstation::RobotStateCommanded const> RobotStateCommandedConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::modrob_workstation::RobotStateCommanded_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::modrob_workstation::RobotStateCommanded_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::modrob_workstation::RobotStateCommanded_<ContainerAllocator1> & lhs, const ::modrob_workstation::RobotStateCommanded_<ContainerAllocator2> & rhs)
{
  return lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::modrob_workstation::RobotStateCommanded_<ContainerAllocator1> & lhs, const ::modrob_workstation::RobotStateCommanded_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace modrob_workstation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::modrob_workstation::RobotStateCommanded_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::modrob_workstation::RobotStateCommanded_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::modrob_workstation::RobotStateCommanded_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::modrob_workstation::RobotStateCommanded_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::modrob_workstation::RobotStateCommanded_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::modrob_workstation::RobotStateCommanded_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::modrob_workstation::RobotStateCommanded_<ContainerAllocator> >
{
  static const char* value()
  {
    return "abb393152ce6989fc811f6837e590662";
  }

  static const char* value(const ::modrob_workstation::RobotStateCommanded_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xabb393152ce6989fULL;
  static const uint64_t static_value2 = 0xc811f6837e590662ULL;
};

template<class ContainerAllocator>
struct DataType< ::modrob_workstation::RobotStateCommanded_<ContainerAllocator> >
{
  static const char* value()
  {
    return "modrob_workstation/RobotStateCommanded";
  }

  static const char* value(const ::modrob_workstation::RobotStateCommanded_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::modrob_workstation::RobotStateCommanded_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# this variable declares different states of the robot\n"
"uint8 state\n"
"\n"
"uint8 OFF = 0\n"
"uint8 CONFIGURABLE = 1\n"
"uint8 IDLE = 1\n"
"uint8 ERROR = 2\n"
"uint8 CONNECTING = 3\n"
"uint8 OP_ANGLES = 4\n"
"uint8 OP_TORQUES = 5\n"
;
  }

  static const char* value(const ::modrob_workstation::RobotStateCommanded_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::modrob_workstation::RobotStateCommanded_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotStateCommanded_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::modrob_workstation::RobotStateCommanded_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::modrob_workstation::RobotStateCommanded_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MODROB_WORKSTATION_MESSAGE_ROBOTSTATECOMMANDED_H

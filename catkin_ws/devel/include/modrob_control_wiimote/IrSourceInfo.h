// Generated by gencpp from file modrob_control_wiimote/IrSourceInfo.msg
// DO NOT EDIT!


#ifndef MODROB_CONTROL_WIIMOTE_MESSAGE_IRSOURCEINFO_H
#define MODROB_CONTROL_WIIMOTE_MESSAGE_IRSOURCEINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace modrob_control_wiimote
{
template <class ContainerAllocator>
struct IrSourceInfo_
{
  typedef IrSourceInfo_<ContainerAllocator> Type;

  IrSourceInfo_()
    : x(0.0)
    , y(0.0)
    , ir_size(0)  {
    }
  IrSourceInfo_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , ir_size(0)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef int64_t _ir_size_type;
  _ir_size_type ir_size;





  typedef boost::shared_ptr< ::modrob_control_wiimote::IrSourceInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::modrob_control_wiimote::IrSourceInfo_<ContainerAllocator> const> ConstPtr;

}; // struct IrSourceInfo_

typedef ::modrob_control_wiimote::IrSourceInfo_<std::allocator<void> > IrSourceInfo;

typedef boost::shared_ptr< ::modrob_control_wiimote::IrSourceInfo > IrSourceInfoPtr;
typedef boost::shared_ptr< ::modrob_control_wiimote::IrSourceInfo const> IrSourceInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::modrob_control_wiimote::IrSourceInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::modrob_control_wiimote::IrSourceInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::modrob_control_wiimote::IrSourceInfo_<ContainerAllocator1> & lhs, const ::modrob_control_wiimote::IrSourceInfo_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.ir_size == rhs.ir_size;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::modrob_control_wiimote::IrSourceInfo_<ContainerAllocator1> & lhs, const ::modrob_control_wiimote::IrSourceInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace modrob_control_wiimote

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::modrob_control_wiimote::IrSourceInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::modrob_control_wiimote::IrSourceInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::modrob_control_wiimote::IrSourceInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::modrob_control_wiimote::IrSourceInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::modrob_control_wiimote::IrSourceInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::modrob_control_wiimote::IrSourceInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::modrob_control_wiimote::IrSourceInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "95274ca88b9f008b99984b9a61d2772e";
  }

  static const char* value(const ::modrob_control_wiimote::IrSourceInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x95274ca88b9f008bULL;
  static const uint64_t static_value2 = 0x99984b9a61d2772eULL;
};

template<class ContainerAllocator>
struct DataType< ::modrob_control_wiimote::IrSourceInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "modrob_control_wiimote/IrSourceInfo";
  }

  static const char* value(const ::modrob_control_wiimote::IrSourceInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::modrob_control_wiimote::IrSourceInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Sensor data pertaining to the Wiimote infrared camera.\n"
"# This message contains data for one of the four infrared \n"
"# light sources that the camera detects.\n"
"#\n"
"# Each light is specified with a 2D position and \n"
"# a 'source magnitude' (ir_size). If the x dimension\n"
"# is set to INVALID_FLOAT, then no light was detected for \n"
"# the respective light. The Wiimote handles up to\n"
"# four light sources, and the wiimote_node.py software\n"
"# is written to that limit as well.\n"
"#\n"
"# I am unsure what the 'ir_size' values represent. \n"
"# They are described as 'source magnitude' in some places. I\n"
"# *assume* this is signal amplitude, but it's unclear. \n"
"# Note that current lowest level cwiid driver does not \n"
"# seem to pass the ir_size value to the cwiid Wiimote.c. \n"
"# For now this size will therefore be set INVALID\n"
"\n"
"float64 x \n"
"float64 y \n"
"int64 ir_size\n"
;
  }

  static const char* value(const ::modrob_control_wiimote::IrSourceInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::modrob_control_wiimote::IrSourceInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.ir_size);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IrSourceInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::modrob_control_wiimote::IrSourceInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::modrob_control_wiimote::IrSourceInfo_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "ir_size: ";
    Printer<int64_t>::stream(s, indent + "  ", v.ir_size);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MODROB_CONTROL_WIIMOTE_MESSAGE_IRSOURCEINFO_H

// Generated by gencpp from file modrob_visualization/Modes.msg
// DO NOT EDIT!


#ifndef MODROB_VISUALIZATION_MESSAGE_MODES_H
#define MODROB_VISUALIZATION_MESSAGE_MODES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace modrob_visualization
{
template <class ContainerAllocator>
struct Modes_
{
  typedef Modes_<ContainerAllocator> Type;

  Modes_()
    : configurable_mode(false)
    , angle_mode(false)  {
    }
  Modes_(const ContainerAllocator& _alloc)
    : configurable_mode(false)
    , angle_mode(false)  {
  (void)_alloc;
    }



   typedef uint8_t _configurable_mode_type;
  _configurable_mode_type configurable_mode;

   typedef uint8_t _angle_mode_type;
  _angle_mode_type angle_mode;





  typedef boost::shared_ptr< ::modrob_visualization::Modes_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::modrob_visualization::Modes_<ContainerAllocator> const> ConstPtr;

}; // struct Modes_

typedef ::modrob_visualization::Modes_<std::allocator<void> > Modes;

typedef boost::shared_ptr< ::modrob_visualization::Modes > ModesPtr;
typedef boost::shared_ptr< ::modrob_visualization::Modes const> ModesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::modrob_visualization::Modes_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::modrob_visualization::Modes_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::modrob_visualization::Modes_<ContainerAllocator1> & lhs, const ::modrob_visualization::Modes_<ContainerAllocator2> & rhs)
{
  return lhs.configurable_mode == rhs.configurable_mode &&
    lhs.angle_mode == rhs.angle_mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::modrob_visualization::Modes_<ContainerAllocator1> & lhs, const ::modrob_visualization::Modes_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace modrob_visualization

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::modrob_visualization::Modes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::modrob_visualization::Modes_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::modrob_visualization::Modes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::modrob_visualization::Modes_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::modrob_visualization::Modes_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::modrob_visualization::Modes_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::modrob_visualization::Modes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "309b86b842890ede800f6b6fd95ff78c";
  }

  static const char* value(const ::modrob_visualization::Modes_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x309b86b842890edeULL;
  static const uint64_t static_value2 = 0x800f6b6fd95ff78cULL;
};

template<class ContainerAllocator>
struct DataType< ::modrob_visualization::Modes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "modrob_visualization/Modes";
  }

  static const char* value(const ::modrob_visualization::Modes_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::modrob_visualization::Modes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# this variable declares wheather we are inside the configurable state or not\n"
"bool configurable_mode\n"
"# this variable declares wheather torque mode or joint angles. True means we are using joint angles\n"
"bool angle_mode\n"
;
  }

  static const char* value(const ::modrob_visualization::Modes_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::modrob_visualization::Modes_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.configurable_mode);
      stream.next(m.angle_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Modes_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::modrob_visualization::Modes_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::modrob_visualization::Modes_<ContainerAllocator>& v)
  {
    s << indent << "configurable_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.configurable_mode);
    s << indent << "angle_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.angle_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MODROB_VISUALIZATION_MESSAGE_MODES_H
